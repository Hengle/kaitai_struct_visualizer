#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

# Some additional magic to make it work right after repo checkout,
# without installation to proper Ruby library dirs

# The `__dir__` method is supposed to provide the real absolute path of the
# `bin/` directory (which this script is in), but it can technically return
# `nil` or a dot `"."` (in an "irb" session) instead. Normally, it shouldn't
# happen unless some very unusual startup method is used, but if it happens,
# we'll skip adding the dirs to $LOAD_PATH and wait for a miracle (which might
# be that the dependencies we need are already available via $LOAD_PATH because
# they are installed as gems, for example).
#
# See also
# * https://stackoverflow.com/a/2206731
# * https://makandracards.com/makandra/42122-ruby-__file__-__dir__-and-symlinks
script_dir = __dir__
unless script_dir.nil? || script_dir == '.'
  $LOAD_PATH << File.expand_path('../lib', script_dir)
  $LOAD_PATH << File.expand_path('../../runtime/ruby/lib', script_dir)
end

require 'kaitai/struct/visualizer'

# ======================================================================

FORMATS = %w[json xml yaml].freeze

options = { format: 'yaml' }
parser = OptionParser.new do |opts|
  prog_name = File.basename($PROGRAM_NAME)

  opts.banner = "Usage: #{prog_name} [options] <file_to_parse.bin> <format.ksy>..."
  opts.separator ''

  opts.on('-I', '--import-path [DIRECTORIES]', '.ksy library search path(s) for imports (see also KSPATH env variable)') do |v|
    options[:import_path] = v
  end

  opts.on('-f', '--format FORMAT', FORMATS, "choose dump format - #{FORMATS.join(', ')} (default: #{options[:format]})") do |v|
    options[:format] = v
  end

  opts.on('--version', "show versions of #{prog_name}, ksc and kaitai-struct (Kaitai Struct runtime library for Ruby)") do |_v|
    puts "#{prog_name} #{Kaitai::Struct::Visualizer::VERSION}"
    if system('kaitai-struct-compiler', '--version').nil?
      warn 'ksv: unable to find and run kaitai-struct-compiler in your PATH'
      exit 1
    end
    require 'kaitai/struct/struct'
    puts "kaitai-struct #{Kaitai::Struct::VERSION} (Kaitai Struct runtime library for Ruby)"
    exit 0
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts parser
  exit 1
end

if ARGV.size < 2
  puts parser
  exit 1
end

c = Kaitai::Struct::Visualizer::KSYCompiler.new(options)
app = Kaitai::Struct::Visualizer::Parser.new(c, ARGV[0], ARGV[1..-1], options)
exc = app.load
raise exc if exc

# ======================================================================

def obj_to_h(obj)
  if (obj == true) || (obj == false) || obj.is_a?(Numeric) || obj.nil?
    obj
  elsif obj.is_a?(Symbol)
    obj.to_s
  elsif obj.is_a?(String)
    if obj.encoding == Encoding::ASCII_8BIT
      r = ''.dup
      obj.each_byte { |x| r << format('%02X ', x) }
      r.chop!
      r
    else
      obj.encode('UTF-8')
    end
  elsif obj.is_a?(Array)
    obj.map { |x| obj_to_h(x) }
  else
    return "OPAQUE (#{obj.class})" unless obj.is_a?(Kaitai::Struct::Struct)

    root = {}

    prop_meths = obj.public_methods(false)
    prop_meths.sort.each do |meth|
      k = meth.to_s
      next if k =~ /^_/

      el = obj.send(meth)
      v = obj_to_h(el)
      root[k] = v unless v.nil?
    end

    # obj.instance_variables.each { |k|
    #   k = k.to_s
    #   next if k =~ /^@_/
    #   el = obj.instance_eval(k)
    #   root[k[1..-1]] = obj_to_h(el)
    # }
    root
  end
end

tree = obj_to_h(app.data)
r = nil

case options[:format]
when 'json'
  require 'json'
  r = JSON.pretty_generate(tree)
when 'xml'
  require 'active_support'
  require 'active_support/core_ext'
  r = tree.to_xml
when 'yaml'
  require 'yaml'
  r = tree.to_yaml
  r = r[4..-1] if r[0..3] == "---\n"
end

puts r
